@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-card">
        <!-- Logo Section -->
        <div class="logo-section">
            <img src="images/generated-image-removebg-preview.png" alt="AgroHub Logo" class="logo-image" />
            <h1 class="brand-name">AgroHub</h1>
        </div>

        <!-- Form Section -->
        <div class="form-section">
            <h2 class="login-title">Log in</h2>
            <p class="login-subtitle">Log in to your AgroHub account</p>

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <!-- Error Message Display -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        @errorMessage
                    </div>
                }

                <!-- Email Field -->
                <div class="form-group">
                    <label for="email">Email*</label>
                    <InputText id="email"
                               @bind-Value="loginModel.Email"
                               placeholder="Enter email"
                               class="form-input" />
                    <ValidationMessage For="() => loginModel.Email" />
                </div>

                <!-- Password Field -->
                <div class="form-group">
                    <label for="password">Password*</label>
                    <InputText id="password"
                               @bind-Value="loginModel.Password"
                               type="password"
                               placeholder="Enter password"
                               class="form-input" />
                    <ValidationMessage For="() => loginModel.Password" />
                </div>

                <!-- Forgot Password Link -->
                <div class="forgot-password">
                    <a href="/forgot-password">Forgot password?</a>
                </div>

                <!-- Login Button -->
                <button type="submit"
                        disabled="@(!IsFormValid || isLoading)"
                        class="login-button">
                    @if (isLoading)
                    {
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span>Log in</span>
                    }
                </button>

                <!-- Sign Up Link -->
                <div class="signup-link">
                    <span>No account yet? </span>
                    <a href="/register">Sign up and explore the platform.</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string? errorMessage = null;

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(loginModel.Email) &&
        !string.IsNullOrWhiteSpace(loginModel.Password);

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Create the login request
            var loginRequest = new
            {
                email = loginModel.Email,
                password = loginModel.Password
            };

            // Call your login API
            var response = await Http.PostAsJsonAsync("api/Auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                // Login successful
                var userResponse = await response.Content.ReadFromJsonAsync<UserResponseDto>();

                // TODO: Store user data in session/local storage for authentication state
                // For now, just navigate to a dashboard or home page
                Navigation.NavigateTo("/");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Invalid email or password.";
            }
            else
            {
                errorMessage = "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to connect to server. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }

    // This should match your backend UserResponseDto
    public class UserResponseDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Surname { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string CompanyCode { get; set; } = string.Empty;
        public int Role { get; set; }
        public DateTime CreatedAt { get; set; }
        public bool IsAdmin => Role == 1;
        public bool IsSimpleUser => Role == 0;
    }
}
