@page "/register"
@using System.ComponentModel.DataAnnotations

<div class="register-container">
    <div class="register-card">
        <!-- Logo Section -->
        <div class="logo-section">
            <img src="images/generated-image-removebg-preview.png" alt="AgroHub Logo" class="logo-image" />
        </div>

        <!-- Form Section -->
        <div class="form-section">
            <h2 class="register-title">Sign up</h2>
            <p class="register-subtitle">Sign up to your AgroHub account</p>

            <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />

                <!-- Name Field -->
                <div class="form-group">
                    <label for="name">Name*</label>
                    <InputText id="name"
                               @bind-Value="registerModel.Name"
                               placeholder="Enter name"
                               class="form-input" />
                    <ValidationMessage For="() => registerModel.Name" />
                </div>

                <!-- Surname Field -->
                <div class="form-group">
                    <label for="surname">Surname*</label>
                    <InputText id="surname"
                               @bind-Value="registerModel.Surname"
                               placeholder="Enter surname"
                               class="form-input" />
                    <ValidationMessage For="() => registerModel.Surname" />
                </div>

                <!-- Email Field -->
                <div class="form-group">
                    <label for="email">Email*</label>
                    <InputText id="email"
                               @bind-Value="registerModel.Email"
                               placeholder="Enter email"
                               class="form-input" />
                    <ValidationMessage For="() => registerModel.Email" />
                </div>

                <!-- IDNO Field -->
                <div class="form-group">
                    <label for="idno">IDNO*</label>
                    <InputText id="idno"
                               @bind-Value="registerModel.CompanyCode"
                               placeholder="Enter IDNO"
                               class="form-input" />
                    <ValidationMessage For="() => registerModel.CompanyCode" />
                </div>

                <!-- Phone Number Field -->
                <div class="form-group">
                    <label for="phone">Phone nr*</label>
                    <InputText id="phone"
                               @bind-Value="registerModel.PhoneNumber"
                               placeholder="Enter phone nr"
                               class="form-input" />
                    <ValidationMessage For="() => registerModel.PhoneNumber" />
                </div>

                <!-- Password Field -->
                <div class="form-group">
                    <label for="password">Password*</label>
                    <InputText id="password"
                               @bind-Value="registerModel.Password"
                               type="password"
                               placeholder="Enter password"
                               class="form-input" />
                    <ValidationMessage For="() => registerModel.Password" />
                </div>

                <!-- Confirm Password Field -->
                <div class="form-group">
                    <InputText id="confirmPassword"
                               @bind-Value="registerModel.ConfirmPassword"
                               type="password"
                               placeholder="Confirm password"
                               class="form-input" />
                    <ValidationMessage For="() => registerModel.ConfirmPassword" />
                </div>

                <!-- Terms Checkbox -->
                <div class="checkbox-group">
                    <InputCheckbox id="terms" @bind-Value="registerModel.AgreeToTerms" class="checkbox-input" />
                    <label for="terms" class="checkbox-label">
                        YES, I agree with the <a href="/terms" class="terms-link">Terms of Service</a>.
                    </label>
                    <ValidationMessage For="() => registerModel.AgreeToTerms" />
                </div>

                <!-- Offers Checkbox -->
                <div class="checkbox-group">
                    <InputCheckbox id="offers" @bind-Value="registerModel.ReceiveOffers" class="checkbox-input" />
                    <label for="offers" class="checkbox-label">
                        YES, I want to be notified of exclusive offers, new products, upcoming betas, and the latest news from AgroHub.
                    </label>
                </div>

                <!-- Error Message Display -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        @errorMessage
                    </div>
                }

                <!-- Sign Up Button with Loading State -->
                <button type="submit"
                        disabled="@(!IsFormValid || isLoading)"
                        class="register-button">
                    @if (isLoading)
                    {
                        <span>Creating account...</span>
                    }
                    else
                    {
                        <span>Sign up</span>
                    }
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private string? errorMessage = null;

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(registerModel.Name) &&
        !string.IsNullOrWhiteSpace(registerModel.Surname) &&
        !string.IsNullOrWhiteSpace(registerModel.Email) &&
        !string.IsNullOrWhiteSpace(registerModel.CompanyCode) &&
        !string.IsNullOrWhiteSpace(registerModel.PhoneNumber) &&
        !string.IsNullOrWhiteSpace(registerModel.Password) &&
        !string.IsNullOrWhiteSpace(registerModel.ConfirmPassword) &&
        registerModel.AgreeToTerms;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Create the registration DTO
            var registrationRequest = new
            {
                name = registerModel.Name,
                surname = registerModel.Surname,
                email = registerModel.Email,
                phoneNumber = registerModel.PhoneNumber,
                companyCode = registerModel.CompanyCode,
                password = registerModel.Password,    // Only actual password sent
                role = 0 // SimpleUser role
                         // Notice: confirmPassword is NOT sent to API
            };


            // Call your registration API
            var response = await Http.PostAsJsonAsync("api/Auth/register", registrationRequest);

            if (response.IsSuccessStatusCode)
            {
                // Success! Show success message
                await JSRuntime.InvokeVoidAsync("alert", "Registration successful! You can now log in.");

                // Optional: Reset form
                registerModel = new RegisterModel();

                // Optional: Redirect to login page
                // NavigationManager.NavigateTo("/login");
            }
            else
            {
                // Handle API errors
                var errorContent = await response.Content.ReadAsStringAsync();
                if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    errorMessage = "Registration failed. Please check your information and try again.";
                }
                else
                {
                    errorMessage = "An error occurred. Please try again later.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to connect to server. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(50, ErrorMessage = "Name cannot exceed 50 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Surname is required")]
        [StringLength(50, ErrorMessage = "Surname cannot exceed 50 characters")]
        public string Surname { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "IDNO is required")]
        [StringLength(13, MinimumLength = 13, ErrorMessage = "IDNO must be exactly 13 characters")]
        [RegularExpression(@"^\d{13}$", ErrorMessage = "IDNO must contain only digits")]
        public string CompanyCode { get; set; } = string.Empty;

        [Required(ErrorMessage = "Phone number is required")]
        [RegularExpression(@"^[\+]?[0-9\-\(\)\s]+$", ErrorMessage = "Invalid phone number format")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\!\?\*\.\@\#\$\%\^\&]).{8,}$",
                          ErrorMessage = "Password must contain uppercase, lowercase, number, and special character")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the Terms of Service")]
        public bool AgreeToTerms { get; set; } = false;

        public bool ReceiveOffers { get; set; } = false;
    }
}
